#ifndef WAVEFORM_GENERATOR_HPP
#define WAVEFORM_GENERATOR_HPP

#include <atomic>
#include <mutex>
#include <vector>

#include "waveform_base.hpp"

namespace tools::waveform {

class WaveformGenerator {
public:
    // Return false if waveform is already registered.
    // Do not take ownership.
    bool add_waveform(const WaveformBase *waveform);

    // Return false if waveform not found.
    bool remove_waveform(const WaveformBase *waveform);

    // Every time this function is called,
    // the returned sample is the next one in the waveform.
    double generate_sample();

    std::vector<double> generate_n_samples(int n_samples);

    // Return the index of the next sample generate_sample() would produce.
    int get_sample_index() const;

    void set_sample_index(int sample_index);

    // Call set_sample_index(0).
    void reset_sample_index();

private:
    std::vector<const WaveformBase *> _waveforms;
    std::mutex _mutex;

    // Index of the next sample generated by generate_sample().
    std::atomic<int> _sample_index = 0;
};

} // namespace tools::waveform

#endif // WAVEFORM_GENERATOR_HPP
